from aiogram import Dispatcher, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from states import DiaryStates, SurveyStates
from keyboards import get_location_buttons, get_companions_buttons, get_yes_no_keyboard
from datetime import datetime, timedelta
import sqlite3
import pytz
from config import GROUP_ID
import logging

logger = logging.getLogger(__name__)

async def cmd_start_diary(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è "
        "–≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30 –∏–ª–∏ 09:45):"
    )
    await state.set_state(DiaryStates.WAITING_FOR_WAKE_UP)

async def process_wake_up_time(message: types.Message, state: FSMContext):
    try:
        wake_up_time = datetime.strptime(message.text.strip(), "%H:%M").time()
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        start_minute = (wake_up_time.minute // 20) * 20
        current_period_start = wake_up_time.replace(minute=start_minute, second=0)
        current_period_end = (datetime.combine(now.date(), current_period_start) + timedelta(minutes=20)).time()
        await state.update_data(
            diary_entries=[],
            current_period_start=current_period_start.strftime("%H:%M"),
            current_period_end=current_period_end.strftime("%H:%M"),
            wake_up_time=wake_up_time.strftime("%H:%M"),
            diary_start_time=now.strftime("%Y-%m-%d %H:%M:%S")
        )
        await ask_activity_question(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)")

async def ask_activity_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"üìù –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: {data['current_period_start']}-{data['current_period_end']}\n\n"
        "1. –ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è? (–û–ø–∏—à–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, –≤–∫–ª—é—á–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ)"
    )
    await state.set_state(DiaryStates.RECORDING_ACTIVITY)

async def process_activity(message: types.Message, state: FSMContext):
    user_answer = message.text.strip()
    if user_answer.lower() == "–Ω–æ—á–Ω–æ–π —Å–æ–Ω":
        await finish_diary(message, state)
        return
    await state.update_data(current_activity=user_answer)
    await message.answer("2. –ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è?", reply_markup=get_location_buttons())
    await state.set_state(DiaryStates.RECORDING_LOCATION)

async def process_location(callback: types.CallbackQuery, state: FSMContext):
    location_map = {
        "loc_home": "–£ —Å–µ–±—è –¥–æ–º–∞",
        "loc_other_home": "–£ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ –¥–æ–º–∞",
        "loc_work": "–ù–∞ —Ä–∞–±–æ—Ç–µ",
        "loc_transport": "–í –ø—É—Ç–∏",
        "loc_outside": "–ù–∞ —É–ª–∏—Ü–µ",
        "loc_hospital": "–í –±–æ–ª—å–Ω–∏—Ü–µ",
        "loc_shop": "–í –º–∞–≥–∞–∑–∏–Ω–µ",
        "loc_other": "–î—Ä—É–≥–æ–µ"
    }
    location = location_map[callback.data]
    if callback.data == "loc_other":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å:")
        await state.set_state(DiaryStates.RECORDING_LOCATION_OTHER)
    else:
        await state.update_data(current_location=location)
        await callback.message.answer("3. –° –∫–µ–º –≤—ã –±—ã–ª–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è?", reply_markup=get_companions_buttons())
        await state.set_state(DiaryStates.RECORDING_COMPANIONS)
    await callback.message.edit_reply_markup(reply_markup=None)

async def process_location_other(message: types.Message, state: FSMContext):
    await state.update_data(current_location=f"–î—Ä—É–≥–æ–µ: {message.text.strip()}")
    await message.answer("3. –° –∫–µ–º –≤—ã –±—ã–ª–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è?", reply_markup=get_companions_buttons())
    await state.set_state(DiaryStates.RECORDING_COMPANIONS)

async def process_companions(callback: types.CallbackQuery, state: FSMContext):
    companion_map = {
        "comp_alone": "–Ø –±—ã–ª–∞ –æ–¥–Ω–∞",
        "comp_husband": "–ú—É–∂",
        "comp_child": "–†–µ–±–µ–Ω–æ–∫",
        "comp_parents": "–†–æ–¥–∏—Ç–µ–ª–∏/—Ä–æ–¥–∏—Ç–µ–ª–∏ –º—É–∂–∞",
        "comp_relatives": "–î—Ä—É–≥–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏",
        "comp_friends": "–î—Ä—É–∑—å—è",
        "comp_colleagues": "–ö–æ–ª–ª–µ–≥–∏",
        "comp_others": "–î—Ä—É–≥–∏–µ –ª—é–¥–∏"
    }
    companion = companion_map[callback.data]
    if callback.data == "comp_others":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —Å –∫–µ–º –≤—ã –±—ã–ª–∏:")
        await state.set_state(DiaryStates.RECORDING_COMPANIONS_OTHER)
    else:
        data = await state.get_data()
        current_companions = data.get('current_companions', [])
        current_companions.append(companion)
        await state.update_data(current_companions=current_companions)
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(current_companions)}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–æ–≥–æ-—Ç–æ?",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(DiaryStates.ASKING_ADD_COMPANION)
    await callback.message.edit_reply_markup(reply_markup=None)

async def process_companions_other(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_companions = data.get('current_companions', [])
    current_companions.append(f"–î—Ä—É–≥–∏–µ: {message.text.strip()}")
    await state.update_data(current_companions=current_companions)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(current_companions)}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–æ–≥–æ-—Ç–æ?",
        reply_markup=get_yes_no_keyboard()
    )
    await state.set_state(DiaryStates.ASKING_ADD_COMPANION)

async def process_add_companion(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "yes":
        await callback.message.answer("–ö–æ–≥–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=get_companions_buttons())
        await state.set_state(DiaryStates.RECORDING_COMPANIONS)
    else:
        data = await state.get_data()
        current_companions = data.get('current_companions', [])
        companions_str = ", ".join(current_companions)
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        now_full = now.strftime("%Y-%m-%d %H:%M:%S")
        with sqlite3.connect("research_bot.db") as conn:
            conn.execute('''
                INSERT INTO diary_entries 
                (chat_id, username, entry_date, timestamp, time_period, activity, location, companions)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                         (
                             callback.message.chat.id,
                             callback.from_user.username,
                             now.strftime('%Y-%m-%d'),
                             now_full,
                             f"{data['current_period_start']}-{data['current_period_end']}",
                             data.get('current_activity', ''),
                             data.get('current_location', ''),
                             companions_str
                         ))
        current_end = datetime.strptime(data['current_period_end'], "%H:%M").time()
        next_start = current_end
        next_end = (datetime.combine(now.date(), next_start) + timedelta(minutes=20)).time()
        await state.update_data(
            current_period_start=next_start.strftime("%H:%M"),
            current_period_end=next_end.strftime("%H:%M"),
            current_companions=[]
        )
        await ask_activity_question(callback.message, state)
    await callback.message.edit_reply_markup(reply_markup=None)

async def finish_diary(message: types.Message, state: FSMContext):
    with sqlite3.connect("research_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT time_period, activity, location, companions, timestamp, username 
            FROM diary_entries 
            WHERE chat_id = ? 
            ORDER BY timestamp''',
                       (message.chat.id,))
        entries = cursor.fetchall()
        cursor.execute('SELECT name, count FROM participants WHERE chat_id = ?', (message.chat.id,))
        user_data = cursor.fetchone()
        user_name = user_data[0] if user_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        current_count = user_data[1] if user_data else 0
        new_count = current_count + 1
        cursor.execute('UPDATE participants SET count = ? WHERE chat_id = ?', (new_count, message.chat.id))
        conn.commit()
    report = []
    for entry in entries:
        time_period, activity, location, companions, timestamp, username = entry
        report_line = (
            f"–í –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ [{time_period}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{username or '–Ω–µ—Ç username'} - {user_name}] "
            f"–¥–µ–ª–∞–ª [{activity}] –≤ –ª–æ–∫–∞—Ü–∏–∏ [{location}] —Å –∫–æ–º–ø–∞–Ω–∏–µ–π [{companions}]. "
            f"–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–≤–∏–ª –≤ [{timestamp}]."
        )
        report.append(report_line)
    full_report = "\n".join(report)
    logger.info("\n" + "=" * 50)
    logger.info("–û–¢–ß–ï–¢ –û –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    logger.info(full_report)
    logger.info("=" * 50 + "\n")
    try:
        from google_sheets import init_google_sheets
        worksheet = init_google_sheets()
        username_to_find = f"@{message.from_user.username}" if message.from_user.username else None
        if new_count == 2:
            await state.set_data({'worksheet': worksheet, 'username_to_find': username_to_find})
            await message.answer(
                "–î–∞–ª–µ–µ, —è –ø–æ–ø—Ä–æ—à—É –≤–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –æ–ø—ã—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞. "
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n\n"
                "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –æ—Ç—Ä–∞–∂–∞–µ—Ç –ª–∏ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø—Ä–∏–≤—ã—á–Ω—ã–π –¥–ª—è –≤–∞—Å —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫, –∏–ª–∏ —ç—Ç–∏ –¥–Ω–∏ "
                "—á–µ–º-—Ç–æ –≤—ã–¥–µ–ª—è–ª–∏—Å—å –∏–∑ –≤–∞—à–µ–π –æ–±—ã—á–Ω–æ–π —Ä—É—Ç–∏–Ω—ã? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–π."
            )
            await state.set_state(DiaryStates.FEEDBACK_QUESTION_1)
            return
        else:
            if username_to_find:
                try:
                    cell = worksheet.find(username_to_find)
                    last_col = len(worksheet.row_values(cell.row))
                    worksheet.update_cell(cell.row, last_col + 1, full_report)
                    print(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫—É {cell.row}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets: {e}")
            else:
                print("Username –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets: {e}")
    with sqlite3.connect("research_bot.db") as conn:
        conn.execute('DELETE FROM diary_entries WHERE chat_id = ?', (message.chat.id,))
    await message.answer(
        "–î–Ω–µ–≤–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑, —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start_diary."
    )
    await state.clear()

def register_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(cmd_start_diary, Command("start_diary"))
    dp.message.register(process_wake_up_time, DiaryStates.WAITING_FOR_WAKE_UP)
    dp.message.register(process_activity, DiaryStates.RECORDING_ACTIVITY)
    dp.callback_query.register(process_location, F.data.startswith("loc_"), DiaryStates.RECORDING_LOCATION)
    dp.message.register(process_location_other, DiaryStates.RECORDING_LOCATION_OTHER)
    dp.callback_query.register(process_companions, F.data.startswith("comp_"), DiaryStates.RECORDING_COMPANIONS)
    dp.message.register(process_companions_other, DiaryStates.RECORDING_COMPANIONS_OTHER)
    dp.callback_query.register(process_add_companion, F.data.in_(["yes", "no"]), DiaryStates.ASKING_ADD_COMPANION)
    dp.message.register(finish_diary, F.text.lower() == "–Ω–æ—á–Ω–æ–π —Å–æ–Ω", StateFilter(
        DiaryStates.WAITING_FOR_WAKE_UP,
        DiaryStates.RECORDING_ACTIVITY,
        DiaryStates.RECORDING_LOCATION,
        DiaryStates.RECORDING_COMPANIONS
    ))